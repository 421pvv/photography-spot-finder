<h1> All Spots Page </h1>
<form id="searchForm" action="javascript:void(0);"> <!-- Prevents form from submitting -->
    <input 
        type="text" 
        name="keyword" 
        id="searchInput" 
        placeholder="Search for spots..." 
        autocomplete="off"
    />
</form>

<section id="spotsList">
    {{#if spots.length}}
        <ul>
            {{#each spots}}
                <li>
                    <h2>{{this.name}}</h2>
                    <p>Rating: {{this.avgRating}}</p>
                    <p>Accessibility: {{this.accessibility}}</p>
                    <p>Best Times to Visit: 
                        {{#each this.bestTimes}} {{this}} {{/each}}
                    </p>
                    <p>Tags: 
                        {{#each this.tags}} <span>{{this}}</span> {{/each}}
                    </p>
                </li>
            {{/each}}
        </ul>
    {{else}}
        <p>No spots available.</p>
    {{/if}}
</section>


{{!-- Reference from stackoverflow to learn more about dynamic searchbars using Ajax: https://stackoverflow.com/questions/51782023/using-ajax-in-node-js-and-displaying-data-using-handlebars --}}
{{!-- https://stackoverflow.com/questions/42395075/node-js-ajax-call-and-display-results-with-handlebars --}}


{{!-- I didn't know that we cann't use arrow functions directly in the script but this is still working. I will update it using normal function if this don't work in your computer --}}
<script>
document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("searchInput");
    const spotsList = document.getElementById("spotsList");

    const renderSpots = (spots) => {
        spotsList.innerHTML = spots.length
            ? `<ul>
                ${spots.map(spot => `
                    <li>
                        <h2>${spot.name}</h2>
                        <p>Rating: ${spot.avgRating}</p>
                        <p>Accessibility: ${spot.accessibility}</p>
                        <p>Best Times to Visit: ${spot.bestTimes.join(", ")}</p>
                        <p>Tags: ${spot.tags.map(tag => `<span>${tag}</span>`).join(" ")}</p>
                    </li>
                `).join('')}
               </ul>`
            : `<p>No spots available.</p>`;
    };

    //fetching all spots before searchning anything
    const fetchAllSpots = async () => {
        try {
            const response = await fetch("/spots/allSpots");
            const spots = await response.json();
            renderSpots(spots);
        } catch (error) {
            console.error("Error fetching spots:", error);
        }
    };

    const searchSpots = async (keyword) = {
        try {
            const response = await fetch(`/spots/search?keyword=${keyword}`);
            const spots = await response.json();
            renderSpots(spots);
        } catch (error) {
            console.error("Error fetching search results:", error);
        }
    };


    //whenever the input event hits, it will render the spots based on inputs or all spots
    searchInput.addEventListener("input", () = {
        const keyword = searchInput.value.trim();
        if (keyword) {
            searchSpots(keyword);
        } else {
            fetchAllSpots(); 
        }
    });

    fetchAllSpots();
});
</script>
